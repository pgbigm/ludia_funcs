ホーム	 コミュニティ	1.概要	4.アンインストール	概要	モジュール名	Ludia functions 文字列の正規化関数とスニペット作成関数を提供するモジュール ludia_funcs-YYYYMMDD.tar.gz 	各提供モジュールのライセンスはLGPLv2.1です。	動作確認環境	モジュール名	Senna senna-1.1.2-fast 	インストール	$ tar zxf postgresql-9.1.X.tar.gz	$ make	# exit	Sennaのインストール	$ cd senna-1.1.2-fast-YYYYMMDD	$ su	•--prefix : インストール先ディレクトリを指定します。未指定時のインストール先は/usr/localです。このオプション指定は必須ではありません。	ここからLudia functionsのソースアーカイブファイルをダウンロードし、ビルドとインストールを行います。	$ make USE_PGXS=1 PG_CONFIG=/opt/pgsql-9.1.X/bin/pg_config SENNA_CFG=/opt/senna-1.1.2-fast/bin/senna-cfg	# exit	•SENNA_CFG : senna-cfgコマンド(Sennaインストール先のbinディレクトリに存在)のパスを指定します。senna-cfgにPATHが通っているのであれば、このオプション指定は不要です。	$ initdb -D $PGDATA --locale=C --encoding=UTF8	custom_variable_classes = 'ludia_funcs'	=# CREATE EXTENSION ludia_funcs;	    Name     | Version | Schema |   Description	(1 row)	•postgresql.confで、shared_preload_librariesとcustom_variable_classesにludia_funcsを設定するのは必須です。 ◦PostgreSQL9.2以降ではcustom_variable_classesは存在しません。設定が必要なのはshared_preload_librariesだけです。	アンインストール	$ psql -d <データベース名>
 ダウンロード	 開発	2.動作確認環境	5.提供関数	Ludia functionsは、文字列の正規化関数とスニペット作成関数を提供するモジュールです。それらの関数は全文検索モジュールLudiaが提供していたものと同じです。 Ludia functionsは、それらの関数をPostgreSQL9.1以降で利用可能にしています。	概要	senna-1.1.2-fast 組み込み型全文検索エンジンSennaの性能改善版 senna-1.1.2-fast-YYYYMMDD.tar.gz 	Ludia functionsは、提供モジュールの一つである性能改善版のSennaと組み合わせて使いうことで、Ludia同様に文字列の正規化やスニペット作成を行います。	Ludia functionsは、以下の環境で動作確認しています。	OS Red Hat Enterprise Linux 6.1 x86_64 	Ludia functionsは、PostgreSQL9.1のみに対応しています。 9.0以前には未対応です。 9.2以降には対応していると思われますが、動作確認していません。	PostgreSQLのインストール	$ cd postgresql-9.1.X	$ su	•--prefix : インストール先ディレクトリを指定します。未指定時のインストール先は/usr/local/pgsqlです。このオプション指定は必須ではありません。	ここからsenna-1.1.2-fastのソースアーカイブファイルをダウンロードし、ビルドとインストールを行います。 Sennaのmakeには長時間かかることに注意してください。	$ ./configure --prefix=/opt/senna-1.1.2-fast --without-mecab	# make install	•--without-mecab : mecabモジュールを使用しないことを指定します。このオプション指定は必須です。	$ tar zxf ludia_funcs-YYYYMMDD.tar.gz	$ su	•USE_PGXS : PostgreSQL関連モジュールをコンパイルするときのオマジナイです。1の指定が必須です。	Ludia functionsの登録	$ vi $PGDATA/postgresql.conf	$ pg_ctl -D $PGDATA start	=# \dx ludia_funcs	-------------+---------+--------+-----------------	•$PGDATAは、データベースクラスタのパスを決めて、そのパスで置き換えてください。	•Ludia functionsの登録には、CREATE EXTENSIONを使います。 CREATE EXTENSIONはデータベース単位でモジュールを登録するため、Ludia functionsを利用したいデータベースすべてにおいて登録が必要です。	Ludia functionsの削除	=# DROP EXTENSION ludia_funcs CASCADE;
$ pg_ctl -D $PGDATA stop	# make USE_PGXS=1 PG_CONFIG=/opt/pgsql-9.1.X/bin/pg_config SENNA_CFG=/opt/senna-1.1.2-fast/bin/senna-cfg uninstall	•Ludia functionsに依存するDBオブジェクトを削除する必要があるため、DROP EXTENSIONにはCASCADEを指定します。	•shared_preload_libraries	Sennaのアンインストール	# cd <senna-1.1.2-fastのソースディレクトリ>	提供関数	•引数1(text) - 正規化する文字列	NFKCの正規化では、例えば、以下のように文字列を変換します。	•全角英数字を半角英数字に変換 ◦ＡｂＣｄＥ１２３ → abcde123	=# SELECT pgs2norm('いロﾊAbＣｄ1２③Ⅳ㈱');	(1 row)	pgs2snippet1は、文字列(引数8)からキーワード(引数7)のスニペット(KWIC)を作成する関数です。	•引数3(integer) - 作成するスニペットの数の上限	•引数6(integer) - HTMLの特殊文字をエスケープするかどうか(する: -1、しない: 0)	•戻り値(text) - キーワード(引数7)を使って文字列(引数8)から作成したスニペット文字列	=# SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, 'PostgreSQL', '最近、PostgreSQLの利用者が増えています。');	(1 row)	=# SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, '"PostgreSQL"+"HINT"', 'pg_hint_planは、PostgreSQLでHINT句を使えるようにするツールです。');	(1 row)	実行例	 ostgreSQLで★"2-gram"★の全文検	pgs2seninfo	•戻り値2(text) - 利用しているSennaのconfigureオプション	             version             |              configure_options	パラメータ	実行例	 2013.04.05	ludia_funcs.norm_cache_limitは、pgs2normが確保するキャッシュの上限サイズを指定するパラメータです。設定値はkB単位で指定します。設定値の範囲は -1 ～ 2TB-1B です。設定値-1(デフォルト値)は、キャッシュサイズ上限としてパラメータwork_memの設定値を使うことを意味します。	キーワード内の"と\は、pgs2snippet1ではメタ文字("は検索文字列の区切り文字、\はエスケープ文字)として解釈されます。 "と\を文字そのものとして解釈させるには、それらを\でエスケープしなければなりません。	実行例
$ su	# exit	postgresql.confの設定削除	•custom_variable_classes	senna-1.1.2-fastのソースディレクトリでアンインストールを行います。	# make uninstall	pgs2norm	•戻り値(text) - 引数1を正規化した文字列	•半角カタカナを全角カタカナに変換 ◦ｱｲｳｴｵ → アイウエオ	•環境依存文字を変換 ◦㌢㍻㊨⑤Ⅷ㈲ → センチ平成右5viii(有)	      pgs2norm	pgs2normは、引数と戻り値の文字列をメモリ上にキャッシュします。そして、pgs2normの次回実行時に引数の文字列がキャッシュされているものと同じであれば、正規化処理を行わず、キャッシュされている戻り値を直接返却することで、処理を高速化します	•引数1(integer) - スニペット作成時に正規化するかどうか(する: 1、しない: 0)	•引数4(text) - スニペット作成時にキーワードの前に付ける文字列	•引数7(text) - スニペット作成に使うキーワード	NULLの引数がある場合、戻り値はNULLです。	        pgs2snippet1	pgs2snippet1では、キーワード(引数7)に複数の文字列を指定できます。複数指定するには、各文字列を"(半角ダブルクォート)で囲み、それらを+(半角プラス)でつなげます。	            pgs2snippet1	•この実行例では、正規化を行う指定(引数1が1)になっているため、キーワードHINTは、小文字のhintにもマッチします。	=# SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, '"\"2-gram\""', 'pg_bigmは、PostgreSQLで"2-gram"の全文検索を使えるようにするツールです。');	(1 row)	pgs2seninfoは、Ludia functionsが利用しているSennaのバージョン情報を表示する関数です。	実行例	---------------------------------+-------------------------------------------------	ludia_funcs.lastupdate	=# SHOW ludia_funcs.last_update ;	(1 row)	ludia_funcs.escape_snippet_keyword	このパラメータは、postgresql.confとSET文(スーパーユーザに限らずどのユーザからでも)で設定値を変更できます。	=# SHOW ludia_funcs.escape_snippet_keyword ;
$ psql -d <データベース名>	ホーム	 コミュニティ	1.概要	4.アンインストール	概要	モジュール名	Ludia functions 文字列の正規化関数とスニペット作成関数を提供するモジュール ludia_funcs-YYYYMMDD.tar.gz 	各提供モジュールのライセンスはLGPLv2.1です。	動作確認環境	モジュール名	Senna senna-1.1.2-fast 	インストール	$ tar zxf postgresql-9.1.X.tar.gz	$ make	# exit	Sennaのインストール	$ cd senna-1.1.2-fast-YYYYMMDD	$ su	•--prefix : インストール先ディレクトリを指定します。未指定時のインストール先は/usr/localです。このオプション指定は必須ではありません。	ここからLudia functionsのソースアーカイブファイルをダウンロードし、ビルドとインストールを行います。	$ make USE_PGXS=1 PG_CONFIG=/opt/pgsql-9.1.X/bin/pg_config SENNA_CFG=/opt/senna-1.1.2-fast/bin/senna-cfg	# exit	•SENNA_CFG : senna-cfgコマンド(Sennaインストール先のbinディレクトリに存在)のパスを指定します。senna-cfgにPATHが通っているのであれば、このオプション指定は不要です。	$ initdb -D $PGDATA --locale=C --encoding=UTF8	custom_variable_classes = 'ludia_funcs'	=# CREATE EXTENSION ludia_funcs;	    Name     | Version | Schema |   Description	(1 row)	•postgresql.confで、shared_preload_librariesとcustom_variable_classesにludia_funcsを設定するのは必須です。 ◦PostgreSQL9.2以降ではcustom_variable_classesは存在しません。設定が必要なのはshared_preload_librariesだけです。	アンインストール
=# DROP EXTENSION ludia_funcs CASCADE;	 ダウンロード	 開発	2.動作確認環境	5.提供関数	Ludia functionsは、文字列の正規化関数とスニペット作成関数を提供するモジュールです。それらの関数は全文検索モジュールLudiaが提供していたものと同じです。 Ludia functionsは、それらの関数をPostgreSQL9.1以降で利用可能にしています。	概要	senna-1.1.2-fast 組み込み型全文検索エンジンSennaの性能改善版 senna-1.1.2-fast-YYYYMMDD.tar.gz 	Ludia functionsは、提供モジュールの一つである性能改善版のSennaと組み合わせて使いうことで、Ludia同様に文字列の正規化やスニペット作成を行います。	Ludia functionsは、以下の環境で動作確認しています。	OS Red Hat Enterprise Linux 6.1 x86_64 	Ludia functionsは、PostgreSQL9.1のみに対応しています。 9.0以前には未対応です。 9.2以降には対応していると思われますが、動作確認していません。	PostgreSQLのインストール	$ cd postgresql-9.1.X	$ su	•--prefix : インストール先ディレクトリを指定します。未指定時のインストール先は/usr/local/pgsqlです。このオプション指定は必須ではありません。	ここからsenna-1.1.2-fastのソースアーカイブファイルをダウンロードし、ビルドとインストールを行います。 Sennaのmakeには長時間かかることに注意してください。	$ ./configure --prefix=/opt/senna-1.1.2-fast --without-mecab	# make install	•--without-mecab : mecabモジュールを使用しないことを指定します。このオプション指定は必須です。	$ tar zxf ludia_funcs-YYYYMMDD.tar.gz	$ su	•USE_PGXS : PostgreSQL関連モジュールをコンパイルするときのオマジナイです。1の指定が必須です。	Ludia functionsの登録	$ vi $PGDATA/postgresql.conf	$ pg_ctl -D $PGDATA start	=# \dx ludia_funcs	-------------+---------+--------+-----------------	•$PGDATAは、データベースクラスタのパスを決めて、そのパスで置き換えてください。	•Ludia functionsの登録には、CREATE EXTENSIONを使います。 CREATE EXTENSIONはデータベース単位でモジュールを登録するため、Ludia functionsを利用したいデータベースすべてにおいて登録が必要です。	Ludia functionsの削除
実行例		# make USE_PGXS=1 PG_CONFIG=/opt/pgsql-9.1.X/bin/pg_config SENNA_CFG=/opt/senna-1.1.2-fast/bin/senna-cfg uninstall	•Ludia functionsに依存するDBオブジェクトを削除する必要があるため、DROP EXTENSIONにはCASCADEを指定します。	•shared_preload_libraries	Sennaのアンインストール	# cd <senna-1.1.2-fastのソースディレクトリ>	提供関数	•引数1(text) - 正規化する文字列	NFKCの正規化では、例えば、以下のように文字列を変換します。	•全角英数字を半角英数字に変換 ◦ＡｂＣｄＥ１２３ → abcde123	=# SELECT pgs2norm('いロﾊAbＣｄ1２③Ⅳ㈱');	(1 row)	pgs2snippet1は、文字列(引数8)からキーワード(引数7)のスニペット(KWIC)を作成する関数です。	•引数3(integer) - 作成するスニペットの数の上限	•引数6(integer) - HTMLの特殊文字をエスケープするかどうか(する: -1、しない: 0)	•戻り値(text) - キーワード(引数7)を使って文字列(引数8)から作成したスニペット文字列	=# SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, 'PostgreSQL', '最近、PostgreSQLの利用者が増えています。');	(1 row)	=# SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, '"PostgreSQL"+"HINT"', 'pg_hint_planは、PostgreSQLでHINT句を使えるようにするツールです。');	(1 row)	実行例	 ostgreSQLで★"2-gram"★の全文検	pgs2seninfo	•戻り値2(text) - 利用しているSennaのconfigureオプション	             version             |              configure_options	パラメータ	実行例	 2013.04.05	ludia_funcs.norm_cache_limitは、pgs2normが確保するキャッシュの上限サイズを指定するパラメータです。設定値はkB単位で指定します。設定値の範囲は -1 ～ 2TB-1B です。設定値-1(デフォルト値)は、キャッシュサイズ上限としてパラメータwork_memの設定値を使うことを意味します	キーワード内の"と\は、pgs2snippet1ではメタ文字("は検索文字列の区切り文字、\はエスケープ文字)として解釈されます。 "と\を文字そのものとして解釈させるには、それらを\でエスケープしなければなりません。
=# SHOW ludia_funcs.escape_snippet_keyword ;		# exit	postgresql.confの設定削除	•custom_variable_classes	senna-1.1.2-fastのソースディレクトリでアンインストールを行います。	# make uninstall	pgs2norm	•戻り値(text) - 引数1を正規化した文字列	•半角カタカナを全角カタカナに変換 ◦ｱｲｳｴｵ → アイウエオ	•環境依存文字を変換 ◦㌢㍻㊨⑤Ⅷ㈲ → センチ平成右5viii(有)	      pgs2norm	pgs2normは、引数と戻り値の文字列をメモリ上にキャッシュします。そして、pgs2normの次回実行時に引数の文字列がキャッシュされているものと同じであれば、正規化処理を行わず、キャッシュされている戻り値を直接返却することで、処理を高速化します	•引数1(integer) - スニペット作成時に正規化するかどうか(する: 1、しない: 0)	•引数4(text) - スニペット作成時にキーワードの前に付ける文字列	•引数7(text) - スニペット作成に使うキーワード	NULLの引数がある場合、戻り値はNULLです。	        pgs2snippet1	pgs2snippet1では、キーワード(引数7)に複数の文字列を指定できます。複数指定するには、各文字列を"(半角ダブルクォート)で囲み、それらを+(半角プラス)でつなげます。	            pgs2snippet1	•この実行例では、正規化を行う指定(引数1が1)になっているため、キーワードHINTは、小文字のhintにもマッチします。	=# SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, '"\"2-gram\""', 'pg_bigmは、PostgreSQLで"2-gram"の全文検索を使えるようにするツールです。');	(1 row)	pgs2seninfoは、Ludia functionsが利用しているSennaのバージョン情報を表示する関数です。	実行例	---------------------------------+-------------------------------------------------	ludia_funcs.lastupdate	=# SHOW ludia_funcs.last_update ;	(1 row)	ludia_funcs.escape_snippet_keyword	このパラメータは、postgresql.confとSET文(スーパーユーザに限らずどのユーザからでも)で設定値を変更できます。
アンインストール	$ psql -d <データベース名>	ホーム	 コミュニティ	1.概要	4.アンインストール	概要	モジュール名	Ludia functions 文字列の正規化関数とスニペット作成関数を提供するモジュール ludia_funcs-YYYYMMDD.tar.gz 	各提供モジュールのライセンスはLGPLv2.1です。	動作確認環境	モジュール名	Senna senna-1.1.2-fast 	インストール	$ tar zxf postgresql-9.1.X.tar.gz	$ make	# exit	Sennaのインストール	$ cd senna-1.1.2-fast-YYYYMMDD	$ su	•--prefix : インストール先ディレクトリを指定します。未指定時のインストール先は/usr/localです。このオプション指定は必須ではありません。	ここからLudia functionsのソースアーカイブファイルをダウンロードし、ビルドとインストールを行います。	$ make USE_PGXS=1 PG_CONFIG=/opt/pgsql-9.1.X/bin/pg_config SENNA_CFG=/opt/senna-1.1.2-fast/bin/senna-cfg	# exit	•SENNA_CFG : senna-cfgコマンド(Sennaインストール先のbinディレクトリに存在)のパスを指定します。senna-cfgにPATHが通っているのであれば、このオプション指定は不要です。	$ initdb -D $PGDATA --locale=C --encoding=UTF8	custom_variable_classes = 'ludia_funcs'	=# CREATE EXTENSION ludia_funcs;	    Name     | Version | Schema |   Description	(1 row)	•postgresql.confで、shared_preload_librariesとcustom_variable_classesにludia_funcsを設定するのは必須です。 ◦PostgreSQL9.2以降ではcustom_variable_classesは存在しません。設定が必要なのはshared_preload_librariesだけです。
Ludia functionsの削除	=# DROP EXTENSION ludia_funcs CASCADE;	 ダウンロード	 開発	2.動作確認環境	5.提供関数	Ludia functionsは、文字列の正規化関数とスニペット作成関数を提供するモジュールです。それらの関数は全文検索モジュールLudiaが提供していたものと同じです。 Ludia functionsは、それらの関数をPostgreSQL9.1以降で利用可能にしています。	概要	senna-1.1.2-fast 組み込み型全文検索エンジンSennaの性能改善版 senna-1.1.2-fast-YYYYMMDD.tar.gz 	Ludia functionsは、提供モジュールの一つである性能改善版のSennaと組み合わせて使いうことで、Ludia同様に文字列の正規化やスニペット作成を行います。	Ludia functionsは、以下の環境で動作確認しています。	OS Red Hat Enterprise Linux 6.1 x86_64 	Ludia functionsは、PostgreSQL9.1のみに対応しています。 9.0以前には未対応です。 9.2以降には対応していると思われますが、動作確認していません。	PostgreSQLのインストール	$ cd postgresql-9.1.X	$ su	•--prefix : インストール先ディレクトリを指定します。未指定時のインストール先は/usr/local/pgsqlです。このオプション指定は必須ではありません。	ここからsenna-1.1.2-fastのソースアーカイブファイルをダウンロードし、ビルドとインストールを行います。 Sennaのmakeには長時間かかることに注意してください。	$ ./configure --prefix=/opt/senna-1.1.2-fast --without-mecab	# make install	•--without-mecab : mecabモジュールを使用しないことを指定します。このオプション指定は必須です。	$ tar zxf ludia_funcs-YYYYMMDD.tar.gz	$ su	•USE_PGXS : PostgreSQL関連モジュールをコンパイルするときのオマジナイです。1の指定が必須です。	Ludia functionsの登録	$ vi $PGDATA/postgresql.conf	$ pg_ctl -D $PGDATA start	=# \dx ludia_funcs	-------------+---------+--------+-----------------	•$PGDATAは、データベースクラスタのパスを決めて、そのパスで置き換えてください。	•Ludia functionsの登録には、CREATE EXTENSIONを使います。 CREATE EXTENSIONはデータベース単位でモジュールを登録するため、Ludia functionsを利用したいデータベースすべてにおいて登録が必要です。
キーワード内の"と\は、pgs2snippet1ではメタ文字("は検索文字列の区切り文字、\はエスケープ文字)として解釈されます。 "と\を文字そのものとして解釈させるには、それらを\でエスケープしなければなりません。	実行例	$ pg_ctl -D $PGDATA stop	# make USE_PGXS=1 PG_CONFIG=/opt/pgsql-9.1.X/bin/pg_config SENNA_CFG=/opt/senna-1.1.2-fast/bin/senna-cfg uninstall	•Ludia functionsに依存するDBオブジェクトを削除する必要があるため、DROP EXTENSIONにはCASCADEを指定します。	•shared_preload_libraries	Sennaのアンインストール	# cd <senna-1.1.2-fastのソースディレクトリ>	提供関数	•引数1(text) - 正規化する文字列	NFKCの正規化では、例えば、以下のように文字列を変換します。	•全角英数字を半角英数字に変換 ◦ＡｂＣｄＥ１２３ → abcde123	=# SELECT pgs2norm('いロﾊAbＣｄ1２③Ⅳ㈱');	(1 row)	pgs2snippet1は、文字列(引数8)からキーワード(引数7)のスニペット(KWIC)を作成する関数です。	•引数3(integer) - 作成するスニペットの数の上限	•引数6(integer) - HTMLの特殊文字をエスケープするかどうか(する: -1、しない: 0)	•戻り値(text) - キーワード(引数7)を使って文字列(引数8)から作成したスニペット文字列	=# SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, 'PostgreSQL', '最近、PostgreSQLの利用者が増えています。');	(1 row)	=# SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, '"PostgreSQL"+"HINT"', 'pg_hint_planは、PostgreSQLでHINT句を使えるようにするツールです。');	(1 row)	実行例	 ostgreSQLで★"2-gram"★の全文検	pgs2seninfo	•戻り値2(text) - 利用しているSennaのconfigureオプション	             version             |              configure_options	パラメータ	実行例	 2013.04.05	ludia_funcs.norm_cache_limitは、pgs2normが確保するキャッシュの上限サイズを指定するパラメータです。設定値はkB単位で指定します。設定値の範囲は -1 ～ 2TB-1B です。設定値-1(デフォルト値)は、キャッシュサイズ上限としてパラメータwork_memの設定値を使うことを意味します。
このパラメータは、postgresql.confとSET文(スーパーユーザに限らずどのユーザからでも)で設定値を変更できます。	=# SHOW ludia_funcs.escape_snippet_keyword ;	$ su	# exit	postgresql.confの設定削除	•custom_variable_classes	senna-1.1.2-fastのソースディレクトリでアンインストールを行います。	# make uninstall	pgs2norm	•戻り値(text) - 引数1を正規化した文字列	•半角カタカナを全角カタカナに変換 ◦ｱｲｳｴｵ → アイウエオ	•環境依存文字を変換 ◦㌢㍻㊨⑤Ⅷ㈲ → センチ平成右5viii(有)	      pgs2norm	pgs2normは、引数と戻り値の文字列をメモリ上にキャッシュします。そして、pgs2normの次回実行時に引数の文字列がキャッシュされているものと同じであれば、正規化処理を行わず、キャッシュされている戻り値を直接返却することで、処理を高速化します	•引数1(integer) - スニペット作成時に正規化するかどうか(する: 1、しない: 0)	•引数4(text) - スニペット作成時にキーワードの前に付ける文字列	•引数7(text) - スニペット作成に使うキーワード	NULLの引数がある場合、戻り値はNULLです。	        pgs2snippet1	pgs2snippet1では、キーワード(引数7)に複数の文字列を指定できます。複数指定するには、各文字列を"(半角ダブルクォート)で囲み、それらを+(半角プラス)でつなげます。	            pgs2snippet1	•この実行例では、正規化を行う指定(引数1が1)になっているため、キーワードHINTは、小文字のhintにもマッチします。	=# SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, '"\"2-gram\""', 'pg_bigmは、PostgreSQLで"2-gram"の全文検索を使えるようにするツールです。');	(1 row)	pgs2seninfoは、Ludia functionsが利用しているSennaのバージョン情報を表示する関数です。	実行例	---------------------------------+-------------------------------------------------	ludia_funcs.lastupdate	=# SHOW ludia_funcs.last_update ;	(1 row)	ludia_funcs.escape_snippet_keyword
