\pset null '(null)'
-- Load pg_bigm and ludia_funcs
CREATE EXTENSION pg_bigm;
CREATE EXTENSION ludia_funcs;
-- Set parameters for the tests
SET client_min_messages TO LOG;
SET standard_conforming_strings TO off;
SET escape_string_warning TO off;
SET work_mem = '4MB';
SET maintenance_work_mem TO '512MB';
SET enable_seqscan TO off;
SET enable_bitmapscan TO on;
-- Test the case where the columns with CHAR data type were indexed
-- with pg_bigm and pgs2norm function.
CREATE TABLE char_tbl (col1 char(256), col2 char(256), col3 char(256));
\copy char_tbl from data/test_tbl.txt
CREATE INDEX char_tbl_idx ON char_tbl USING gin (pgs2norm(col1) gin_bigm_ops,
                                                                   pgs2norm(col2) gin_bigm_ops,
                                                                   pgs2norm(col3) gin_bigm_ops)
                                                                   WITH (FASTUPDATE = off);
SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, 'v(株)', col1) FROM char_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('v(株)'))
    ORDER BY col1;
     pgs2snippet1      
-----------------------
 ロﾊAbＣｄ1２③★Ⅳ㈱★');
(1 row)

SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, '②⓪', col1) FROM char_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('②⓪'))
    ORDER BY col1;
 pgs2snippet1  
---------------
 ★ 20★13.04.05
(1 row)

SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, 'ｱﾌﾟﾘｹｰｼｮﾝ', col1) FROM char_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ｱﾌﾟﾘｹｰｼｮﾝ'))
    ORDER BY col1;
      pgs2snippet1      
------------------------
 ト★アプリケーション★側
(1 row)

-- Test the case where the columns with VARCHAR data type were indexed
-- with pg_bigm and pgs2norm function.
CREATE TABLE varchar_tbl (col1 varchar(256), col2 varchar(256), col3 varchar(256));
\copy varchar_tbl from data/test_tbl.txt
CREATE INDEX varchar_tbl_idx ON varchar_tbl USING gin (pgs2norm(col1) gin_bigm_ops,
                                                                           pgs2norm(col2) gin_bigm_ops,
                                                                           pgs2norm(col3) gin_bigm_ops)
                                                                           WITH (FASTUPDATE = off);
SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, 'v(株)', col1) FROM varchar_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('v(株)'))
    ORDER BY col1;
     pgs2snippet1      
-----------------------
 ロﾊAbＣｄ1２③★Ⅳ㈱★');
(1 row)

SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, '②⓪', col1) FROM varchar_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('②⓪'))
    ORDER BY col1;
 pgs2snippet1  
---------------
 ★ 20★13.04.05
(1 row)

SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, 'ｱﾌﾟﾘｹｰｼｮﾝ', col1) FROM varchar_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ｱﾌﾟﾘｹｰｼｮﾝ'))
    ORDER BY col1;
      pgs2snippet1      
------------------------
 ト★アプリケーション★側
(1 row)

-- Test the case where the columns with TEXT data type were indexed
-- with pg_bigm and pgs2norm function.
CREATE TABLE text_tbl (col1 text, col2 text, col3 text);
\copy text_tbl from data/test_tbl.txt
CREATE INDEX text_tbl_idx ON text_tbl USING gin (pgs2norm(col1) gin_bigm_ops,
                                                                  pgs2norm(col2) gin_bigm_ops,
                                                                  pgs2norm(col3) gin_bigm_ops)
                                                                  WITH (FASTUPDATE = off);
SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, 'v(株)', col1) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('v(株)'))
    ORDER BY col1;
     pgs2snippet1      
-----------------------
 ロﾊAbＣｄ1２③★Ⅳ㈱★');
(1 row)

SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, '②⓪', col1) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('②⓪'))
    ORDER BY col1;
 pgs2snippet1  
---------------
 ★ 20★13.04.05
(1 row)

SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, 'ｱﾌﾟﾘｹｰｼｮﾝ', col1) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ｱﾌﾟﾘｹｰｼｮﾝ'))
    ORDER BY col1;
      pgs2snippet1      
------------------------
 ト★アプリケーション★側
(1 row)

-- Test the case where condition has "AND".
SELECT count(*) FROM text_tbl WHERE
    pgs2norm(col1) LIKE likequery(pgs2norm('解釈')) AND
    pgs2norm(col1) LIKE likequery(pgs2norm('実装')) AND
    pgs2norm(col1) LIKE likequery(pgs2norm('場合'));
 count 
-------
     1
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM text_tbl WHERE
    pgs2norm(col1) LIKE likequery(pgs2norm('解釈')) AND
    pgs2norm(col1) LIKE likequery(pgs2norm('実装')) AND
    pgs2norm(col1) LIKE likequery(pgs2norm('場合'));
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: ((pgs2norm(col1) ~~ '%解釈%'::text) AND (pgs2norm(col1) ~~ '%実装%'::text) AND (pgs2norm(col1) ~~ '%場合%'::text))
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: ((pgs2norm(col1) ~~ '%解釈%'::text) AND (pgs2norm(col1) ~~ '%実装%'::text) AND (pgs2norm(col1) ~~ '%場合%'::text))
(5 rows)

SELECT count(*) FROM text_tbl WHERE
    pgs2norm(col1) LIKE likequery(pgs2norm('解釈')) AND
    pgs2norm(col2) LIKE likequery(pgs2norm('ﾕｰｻ゛')) AND
    pgs2norm(col3) LIKE likequery(pgs2norm('ＳｑＬ'));
 count 
-------
     1
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM text_tbl WHERE
    pgs2norm(col1) LIKE likequery(pgs2norm('解釈')) AND
    pgs2norm(col2) LIKE likequery(pgs2norm('ﾕｰｻ゛')) AND
    pgs2norm(col3) LIKE likequery(pgs2norm('ＳｑＬ'));
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: ((pgs2norm(col1) ~~ '%解釈%'::text) AND (pgs2norm(col2) ~~ '%ユーザ%'::text) AND (pgs2norm(col3) ~~ '%sql%'::text))
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: ((pgs2norm(col1) ~~ '%解釈%'::text) AND (pgs2norm(col2) ~~ '%ユーザ%'::text) AND (pgs2norm(col3) ~~ '%sql%'::text))
(5 rows)

-- Test the case where condition has "OR".
SELECT count(*) FROM text_tbl WHERE
    pgs2norm(col2) LIKE likequery(pgs2norm('ﾊ゜ラメータ')) OR
    pgs2norm(col2) LIKE likequery(pgs2norm('㉜')) OR
    pgs2norm(col2) LIKE likequery(pgs2norm('  '));
 count 
-------
     9
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM text_tbl WHERE
    pgs2norm(col2) LIKE likequery(pgs2norm('ﾊ゜ラメータ')) OR
    pgs2norm(col2) LIKE likequery(pgs2norm('㉜')) OR
    pgs2norm(col2) LIKE likequery(pgs2norm('  '));
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: ((pgs2norm(col2) ~~ '%パラメータ%'::text) OR (pgs2norm(col2) ~~ '%32%'::text) OR (pgs2norm(col2) ~~ '%  %'::text))
         ->  BitmapOr
               ->  Bitmap Index Scan on text_tbl_idx
                     Index Cond: (pgs2norm(col2) ~~ '%パラメータ%'::text)
               ->  Bitmap Index Scan on text_tbl_idx
                     Index Cond: (pgs2norm(col2) ~~ '%32%'::text)
               ->  Bitmap Index Scan on text_tbl_idx
                     Index Cond: (pgs2norm(col2) ~~ '%  %'::text)
(10 rows)

SELECT count(*) FROM text_tbl WHERE
    pgs2norm(col1) LIKE likequery(pgs2norm('ﾊ゜ラメータ')) OR
    pgs2norm(col2) LIKE likequery(pgs2norm('㉜')) OR
    pgs2norm(col3) LIKE likequery(pgs2norm('  '));
 count 
-------
    10
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM text_tbl WHERE
    pgs2norm(col1) LIKE likequery(pgs2norm('ﾊ゜ラメータ')) OR
    pgs2norm(col2) LIKE likequery(pgs2norm('㉜')) OR
    pgs2norm(col3) LIKE likequery(pgs2norm('  '));
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: ((pgs2norm(col1) ~~ '%パラメータ%'::text) OR (pgs2norm(col2) ~~ '%32%'::text) OR (pgs2norm(col3) ~~ '%  %'::text))
         ->  BitmapOr
               ->  Bitmap Index Scan on text_tbl_idx
                     Index Cond: (pgs2norm(col1) ~~ '%パラメータ%'::text)
               ->  Bitmap Index Scan on text_tbl_idx
                     Index Cond: (pgs2norm(col2) ~~ '%32%'::text)
               ->  Bitmap Index Scan on text_tbl_idx
                     Index Cond: (pgs2norm(col3) ~~ '%  %'::text)
(10 rows)

-- Test the case where condition has "NOT".
SELECT count(*) FROM text_tbl WHERE
    pgs2norm(col3) LIKE likequery(pgs2norm('ludia')) AND
    NOT pgs2norm(col3) LIKE likequery(pgs2norm('㊐')) AND
    NOT pgs2norm(col3) LIKE likequery(pgs2norm('Ⓟ'));
 count 
-------
    11
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM text_tbl WHERE
    pgs2norm(col3) LIKE likequery(pgs2norm('ludia')) AND
    NOT pgs2norm(col3) LIKE likequery(pgs2norm('㊐')) AND
    NOT pgs2norm(col3) LIKE likequery(pgs2norm('Ⓟ'));
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: (pgs2norm(col3) ~~ '%ludia%'::text)
         Filter: ((pgs2norm(col3) !~~ '%日%'::text) AND (pgs2norm(col3) !~~ '%p%'::text))
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: (pgs2norm(col3) ~~ '%ludia%'::text)
(6 rows)

SELECT count(*) FROM text_tbl WHERE
    pgs2norm(col2) LIKE likequery(pgs2norm('ludia')) AND
    NOT pgs2norm(col3) LIKE likequery(pgs2norm('㊐')) AND
    NOT pgs2norm(col1) LIKE likequery(pgs2norm('Ⓟ'));
 count 
-------
     8
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM text_tbl WHERE
    pgs2norm(col2) LIKE likequery(pgs2norm('ludia')) AND
    NOT pgs2norm(col3) LIKE likequery(pgs2norm('㊐')) AND
    NOT pgs2norm(col1) LIKE likequery(pgs2norm('Ⓟ'));
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: (pgs2norm(col2) ~~ '%ludia%'::text)
         Filter: ((pgs2norm(col3) !~~ '%日%'::text) AND (pgs2norm(col1) !~~ '%p%'::text))
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: (pgs2norm(col2) ~~ '%ludia%'::text)
(6 rows)

-- Test for text search with many conditions
SELECT count(*) FROM text_tbl WHERE
    (pgs2norm(col1) LIKE likequery(pgs2norm('文字')) AND
	pgs2norm(col1) LIKE likequery(pgs2norm('無効')) AND
	pgs2norm(col1) NOT LIKE likequery(pgs2norm('設定'))) OR
	(pgs2norm(col2) LIKE likequery(pgs2norm('文字')) AND
	pgs2norm(col2) LIKE likequery(pgs2norm('無効')) AND
	pgs2norm(col2) NOT LIKE likequery(pgs2norm('設定'))) OR
	(pgs2norm(col3) LIKE likequery(pgs2norm('文字')) AND
	pgs2norm(col3) LIKE likequery(pgs2norm('無効')) AND
	pgs2norm(col3) NOT LIKE likequery(pgs2norm('設定')));
 count 
-------
     1
(1 row)

EXPLAIN (costs off) SELECT count(*) FROM text_tbl WHERE
    (pgs2norm(col1) LIKE likequery(pgs2norm('文字')) AND
	pgs2norm(col1) LIKE likequery(pgs2norm('無効')) AND
	pgs2norm(col1) NOT LIKE likequery(pgs2norm('設定'))) OR
	(pgs2norm(col2) LIKE likequery(pgs2norm('文字')) AND
	pgs2norm(col2) LIKE likequery(pgs2norm('無効')) AND
	pgs2norm(col2) NOT LIKE likequery(pgs2norm('設定'))) OR
	(pgs2norm(col3) LIKE likequery(pgs2norm('文字')) AND
	pgs2norm(col3) LIKE likequery(pgs2norm('無効')) AND
	pgs2norm(col3) NOT LIKE likequery(pgs2norm('設定')));
                                                                                                                                                                                     QUERY PLAN                                                                                                                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: (((pgs2norm(col1) ~~ '%文字%'::text) AND (pgs2norm(col1) ~~ '%無効%'::text)) OR ((pgs2norm(col2) ~~ '%文字%'::text) AND (pgs2norm(col2) ~~ '%無効%'::text)) OR ((pgs2norm(col3) ~~ '%文字%'::text) AND (pgs2norm(col3) ~~ '%無効%'::text)))
         Filter: (((pgs2norm(col1) ~~ '%文字%'::text) AND (pgs2norm(col1) ~~ '%無効%'::text) AND (pgs2norm(col1) !~~ '%設定%'::text)) OR ((pgs2norm(col2) ~~ '%文字%'::text) AND (pgs2norm(col2) ~~ '%無効%'::text) AND (pgs2norm(col2) !~~ '%設定%'::text)) OR ((pgs2norm(col3) ~~ '%文字%'::text) AND (pgs2norm(col3) ~~ '%無効%'::text) AND (pgs2norm(col3) !~~ '%設定%'::text)))
         ->  BitmapOr
               ->  Bitmap Index Scan on text_tbl_idx
                     Index Cond: ((pgs2norm(col1) ~~ '%文字%'::text) AND (pgs2norm(col1) ~~ '%無効%'::text))
               ->  Bitmap Index Scan on text_tbl_idx
                     Index Cond: ((pgs2norm(col2) ~~ '%文字%'::text) AND (pgs2norm(col2) ~~ '%無効%'::text))
               ->  Bitmap Index Scan on text_tbl_idx
                     Index Cond: ((pgs2norm(col3) ~~ '%文字%'::text) AND (pgs2norm(col3) ~~ '%無効%'::text))
(11 rows)

-- Test for UPDATE and DELETE
UPDATE text_tbl SET col1 = col2, col2 = col3, col3 = col1;
UPDATE text_tbl SET col1 = col2, col2 = col3, col3 = col1;
UPDATE text_tbl SET col1 = col2, col2 = col3, col3 = col1;
SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, 'v(株)', col1) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('v(株)'))
    ORDER BY col1;
     pgs2snippet1      
-----------------------
 ロﾊAbＣｄ1２③★Ⅳ㈱★');
(1 row)

SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, '②⓪', col1) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('②⓪'))
    ORDER BY col1;
 pgs2snippet1  
---------------
 ★ 20★13.04.05
(1 row)

SELECT pgs2snippet1(1, 32, 1, '★', '★', 0, 'ｱﾌﾟﾘｹｰｼｮﾝ', col1) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ｱﾌﾟﾘｹｰｼｮﾝ'))
    ORDER BY col1;
      pgs2snippet1      
------------------------
 ト★アプリケーション★側
(1 row)

-- The text search for updated or deleted records must return no results
-- even when recheck is skipped on the text search.
EXPLAIN (costs off) UPDATE text_tbl SET col1 =
    (select string_agg(chr(num), '') from generate_series(ascii('㋐'), ascii('㋾')) num)
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('㊀'));
                         QUERY PLAN                         
------------------------------------------------------------
 Update on text_tbl
   InitPlan 1 (returns $0)
     ->  Aggregate
           ->  Function Scan on generate_series num
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%一%'::text)
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%一%'::text)
(8 rows)

UPDATE text_tbl SET col1 =
    (select string_agg(chr(num), '') from generate_series(ascii('㋐'), ascii('㋾')) num)
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('㊀'));
SELECT count(*) FROM text_tbl WHERE pgs2norm(col1) LIKE likequery(pgs2norm('㊀'));
 count 
-------
     0
(1 row)

EXPLAIN (costs off) DELETE FROM text_tbl WHERE pgs2norm(col1) like likequery(pgs2norm('⑬'));
                         QUERY PLAN                         
------------------------------------------------------------
 Delete on text_tbl
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%13%'::text)
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%13%'::text)
(5 rows)

DELETE FROM text_tbl WHERE pgs2norm(col1) like likequery(pgs2norm('⑬'));
SELECT count(*) FROM text_tbl WHERE pgs2norm(col1) like likequery(pgs2norm('⑬'));
 count 
-------
     0
(1 row)

-- Test whether both seq scan and bitmap scan return the same results
SET enable_seqscan to on;
SET enable_bitmapscan to off;
SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都山田太郎'))
    ORDER BY col1;
     replace     
-----------------
 東京都*山田太郎
 東京都山田太郎
(2 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都 山田太郎'))
    ORDER BY col1;
     replace     
-----------------
 東京都 山田太郎
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都 山田 太郎'))
    ORDER BY col1;
     replace      
------------------
 東京都 山田 太郎
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(E'東京都\t山田太郎'))
    ORDER BY col1;
     replace     
-----------------
 東京都*山田太郎
 東京都山田太郎
(2 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都山田　太郎'))
    ORDER BY col1;
     replace      
------------------
 東京都山田 太郎
 東京都山田　太郎
(2 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('京都山'))
    ORDER BY col1;
     replace      
------------------
 東京都*山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(4 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('京都 山田'))
    ORDER BY col1;
     replace      
------------------
 東京都 山田 太郎
 東京都 山田太郎
(2 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('都 山田'))
    ORDER BY col1;
     replace      
------------------
 東京都 山田 太郎
 東京都 山田太郎
(2 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('都 山'))
    ORDER BY col1;
     replace      
------------------
 東京都 山田 太郎
 東京都 山田太郎
(2 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('  山'))
    ORDER BY col1;
     replace      
------------------
 東京都  山田太郎
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('京都  '))
    ORDER BY col1;
     replace      
------------------
 東京都  山田太郎
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(E'都\t'))
    ORDER BY col1;
     replace      
------------------
 東京と京都
 東京都
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(9 rows)

SELECT count(*) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('　'));
 count 
-------
    48
(1 row)

SELECT count(*) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(' '));
 count 
-------
    48
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('山'))
    ORDER BY col1;
     replace      
------------------
 山田
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(8 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(' 山 '))
    ORDER BY col1;
 replace 
---------
(0 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ポ'))
    ORDER BY col1;
 replace 
---------
 ポ
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ﾎﾟ'))
    ORDER BY col1;
 replace 
---------
 ポ
(1 row)

SELECT count(*) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('A'));
 count 
-------
    30
(1 row)

SELECT count(*) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('a'));
 count 
-------
    30
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('AA'))
    ORDER BY col1;
 replace 
---------
(0 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都'))
    ORDER BY col1;
     replace      
------------------
 東京都
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(8 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('山'))
    ORDER BY col1;
     replace      
------------------
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(7 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('山'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('東京都'))
    ORDER BY col1;
     replace      
------------------
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(7 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('山'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('田'))
    ORDER BY col1;
     replace      
------------------
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(7 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('山'))
    OR pgs2norm(col1) LIKE likequery(pgs2norm('ポ'))
    ORDER BY col1;
     replace      
------------------
 ポ
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(8 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都山田太郎'))
    ORDER BY col1;
                          QUERY PLAN                          
--------------------------------------------------------------
 Sort
   Sort Key: col1
   ->  Seq Scan on text_tbl
         Filter: (pgs2norm(col1) ~~ '%東京都山田太郎%'::text)
(4 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都 山田 太郎'))
    ORDER BY col1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: col1
   ->  Seq Scan on text_tbl
         Filter: (pgs2norm(col1) ~~ '%東京都 山田 太郎%'::text)
(4 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(E'東京都\t山田太郎'))
    ORDER BY col1;
                          QUERY PLAN                          
--------------------------------------------------------------
 Sort
   Sort Key: col1
   ->  Seq Scan on text_tbl
         Filter: (pgs2norm(col1) ~~ '%東京都山田太郎%'::text)
(4 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('都 山田'))
    ORDER BY col1;
                      QUERY PLAN                       
-------------------------------------------------------
 Sort
   Sort Key: col1
   ->  Seq Scan on text_tbl
         Filter: (pgs2norm(col1) ~~ '%都 山田%'::text)
(4 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('  山'))
    ORDER BY col1;
                     QUERY PLAN                     
----------------------------------------------------
 Sort
   Sort Key: col1
   ->  Seq Scan on text_tbl
         Filter: (pgs2norm(col1) ~~ '%  山%'::text)
(4 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(E'都\t'))
    ORDER BY col1;
                    QUERY PLAN                    
--------------------------------------------------
 Sort
   Sort Key: col1
   ->  Seq Scan on text_tbl
         Filter: (pgs2norm(col1) ~~ '%都%'::text)
(4 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('　'))
    ORDER BY col1;
                   QUERY PLAN                    
-------------------------------------------------
 Sort
   Sort Key: col1
   ->  Seq Scan on text_tbl
         Filter: (pgs2norm(col1) ~~ '% %'::text)
(4 rows)

SET enable_seqscan to off;
SET enable_bitmapscan to on;
SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都山田太郎'))
    ORDER BY col1;
     replace     
-----------------
 東京都*山田太郎
 東京都山田太郎
(2 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都 山田太郎'))
    ORDER BY col1;
     replace     
-----------------
 東京都 山田太郎
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都 山田 太郎'))
    ORDER BY col1;
     replace      
------------------
 東京都 山田 太郎
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(E'東京都\t山田太郎'))
    ORDER BY col1;
     replace     
-----------------
 東京都*山田太郎
 東京都山田太郎
(2 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都山田　太郎'))
    ORDER BY col1;
     replace      
------------------
 東京都山田 太郎
 東京都山田　太郎
(2 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('京都山'))
    ORDER BY col1;
     replace      
------------------
 東京都*山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(4 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('京都 山田'))
    ORDER BY col1;
     replace      
------------------
 東京都 山田 太郎
 東京都 山田太郎
(2 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('都 山田'))
    ORDER BY col1;
     replace      
------------------
 東京都 山田 太郎
 東京都 山田太郎
(2 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('都 山'))
    ORDER BY col1;
     replace      
------------------
 東京都 山田 太郎
 東京都 山田太郎
(2 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('  山'))
    ORDER BY col1;
     replace      
------------------
 東京都  山田太郎
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('京都  '))
    ORDER BY col1;
     replace      
------------------
 東京都  山田太郎
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(E'都\t'))
    ORDER BY col1;
     replace      
------------------
 東京と京都
 東京都
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(9 rows)

SELECT count(*) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('　'));
 count 
-------
    48
(1 row)

SELECT count(*) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(' '));
 count 
-------
    48
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('山'))
    ORDER BY col1;
     replace      
------------------
 山田
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(8 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(' 山 '))
    ORDER BY col1;
 replace 
---------
(0 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ポ'))
    ORDER BY col1;
 replace 
---------
 ポ
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ﾎﾟ'))
    ORDER BY col1;
 replace 
---------
 ポ
(1 row)

SELECT count(*) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('A'));
 count 
-------
    30
(1 row)

SELECT count(*) FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('a'));
 count 
-------
    30
(1 row)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('AA'))
    ORDER BY col1;
 replace 
---------
(0 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都'))
    ORDER BY col1;
     replace      
------------------
 東京都
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(8 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('山'))
    ORDER BY col1;
     replace      
------------------
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(7 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('山'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('東京都'))
    ORDER BY col1;
     replace      
------------------
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(7 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('山'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('田'))
    ORDER BY col1;
     replace      
------------------
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(7 rows)

SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('山'))
    OR pgs2norm(col1) LIKE likequery(pgs2norm('ポ'))
    ORDER BY col1;
     replace      
------------------
 ポ
 東京都*山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(8 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都山田太郎'))
    ORDER BY col1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort
   Sort Key: col1
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%東京都山田太郎%'::text)
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%東京都山田太郎%'::text)
(6 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都 山田 太郎'))
    ORDER BY col1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Sort Key: col1
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%東京都 山田 太郎%'::text)
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%東京都 山田 太郎%'::text)
(6 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(E'東京都\t山田太郎'))
    ORDER BY col1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort
   Sort Key: col1
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%東京都山田太郎%'::text)
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%東京都山田太郎%'::text)
(6 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('都 山田'))
    ORDER BY col1;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Sort
   Sort Key: col1
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%都 山田%'::text)
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%都 山田%'::text)
(6 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('  山'))
    ORDER BY col1;
                          QUERY PLAN                          
--------------------------------------------------------------
 Sort
   Sort Key: col1
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%  山%'::text)
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%  山%'::text)
(6 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(E'都\t'))
    ORDER BY col1;
                         QUERY PLAN                         
------------------------------------------------------------
 Sort
   Sort Key: col1
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%都%'::text)
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%都%'::text)
(6 rows)

EXPLAIN (costs off) SELECT replace(col1, E'\t', '*') FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('　'))
    ORDER BY col1;
                        QUERY PLAN                         
-----------------------------------------------------------
 Sort
   Sort Key: col1
   ->  Bitmap Heap Scan on text_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '% %'::text)
         ->  Bitmap Index Scan on text_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '% %'::text)
(6 rows)

-- Test whether recheck is skipped expectedly when keyword length is 1 or 2
SET ludia_funcs.enable_debug TO on;
SELECT col1 FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都')) ORDER BY col1;
LOG:  pgs2malloc(): buflen 2048, needed 22, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都
LOG:  pgs2malloc(): buflen 2048, needed 46, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都山田太郎
LOG:  pgs2malloc(): buflen 2048, needed 22, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都
LOG:  pgs2malloc(): buflen 2048, needed 48, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都 山田太郎
LOG:  pgs2malloc(): buflen 2048, needed 48, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都山田 太郎
LOG:  pgs2malloc(): buflen 2048, needed 50, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都 山田 太郎
LOG:  pgs2malloc(): buflen 2048, needed 47, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都	山田太郎
LOG:  pgs2malloc(): buflen 2048, needed 50, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都山田　太郎
LOG:  pgs2malloc(): buflen 2048, needed 50, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都  山田太郎
LOG:  pgs2malloc(): buflen 2048, needed 34, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京と京都
       col1       
------------------
 東京都
 東京都  山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(8 rows)

SELECT col1 FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('京都')) ORDER BY col1;
LOG:  pgs2malloc(): buflen 2048, needed 16, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 京都
       col1       
------------------
 東京と京都
 東京都
 東京都  山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(9 rows)

SELECT col1 FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('京')) ORDER BY col1;
LOG:  pgs2malloc(): buflen 2048, needed 10, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 京
       col1       
------------------
 東京と京都
 東京都
 東京都  山田太郎
 東京都  山田太郎
 東京都 山田 太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都山田　太郎
 東京都山田太郎
(9 rows)

SELECT pgs2snippet1(1, 50, 1, '*', '*', 0, '東', col1) FROM text_tbl
    WHERE pgs2norm(col2) LIKE likequery(pgs2norm('東')) ORDER BY col1;
LOG:  pgs2malloc(): buflen 2048, needed 10, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東
LOG:  GetSennaQuery(): quick exit: 東
LOG:  GetSennaQuery(): quick exit: 東
LOG:  GetSennaQuery(): quick exit: 東
LOG:  GetSennaQuery(): quick exit: 東
LOG:  GetSennaQuery(): quick exit: 東
LOG:  GetSennaQuery(): quick exit: 東
LOG:  GetSennaQuery(): quick exit: 東
LOG:  GetSennaQuery(): quick exit: 東
       pgs2snippet1       
--------------------------
 *東*京と京都
 *東*京都
 *東*京都        山田太郎
 *東*京都  山田太郎
 *東*京都 山田 太郎
 *東*京都 山田太郎
 *東*京都山田 太郎
 *東*京都山田　太郎
 *東*京都山田太郎
(9 rows)

SELECT col1 FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('山'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('京'));
LOG:  pgs2malloc(): buflen 2048, needed 10, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 山
LOG:  pgs2malloc(): buflen 2048, needed 10, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 京
       col1       
------------------
 東京都山田太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都 山田 太郎
 東京都  山田太郎
 東京都山田　太郎
 東京都  山田太郎
(7 rows)

SELECT col1 FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('山田'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('京都'));
LOG:  pgs2malloc(): buflen 2048, needed 16, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 山田
LOG:  pgs2malloc(): buflen 2048, needed 16, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 京都
       col1       
------------------
 東京都山田太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都 山田 太郎
 東京都  山田太郎
 東京都山田　太郎
 東京都  山田太郎
(7 rows)

SELECT col1 FROM text_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('東京都'))
    AND pgs2norm(col1) LIKE likequery(pgs2norm('太'));
LOG:  pgs2malloc(): buflen 2048, needed 22, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都
LOG:  pgs2malloc(): buflen 2048, needed 10, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 太
LOG:  pgs2malloc(): buflen 2048, needed 46, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都山田太郎
LOG:  pgs2norm(): quick exit: 東京都山田太郎
LOG:  pgs2malloc(): buflen 2048, needed 48, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都 山田太郎
LOG:  pgs2norm(): quick exit: 東京都 山田太郎
LOG:  pgs2malloc(): buflen 2048, needed 48, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都山田 太郎
LOG:  pgs2norm(): quick exit: 東京都山田 太郎
LOG:  pgs2malloc(): buflen 2048, needed 50, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都 山田 太郎
LOG:  pgs2norm(): quick exit: 東京都 山田 太郎
LOG:  pgs2malloc(): buflen 2048, needed 47, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都	山田太郎
LOG:  pgs2norm(): quick exit: 東京都	山田太郎
LOG:  pgs2malloc(): buflen 2048, needed 50, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都山田　太郎
LOG:  pgs2norm(): quick exit: 東京都山田　太郎
LOG:  pgs2malloc(): buflen 2048, needed 50, maxlen 4194304
LOG:  pgs2norm(): complete (set result cache): 東京都  山田太郎
LOG:  pgs2norm(): quick exit: 東京都  山田太郎
       col1       
------------------
 東京都山田太郎
 東京都 山田太郎
 東京都山田 太郎
 東京都 山田 太郎
 東京都  山田太郎
 東京都山田　太郎
 東京都  山田太郎
(7 rows)

SET ludia_funcs.enable_debug TO off;
-- Test the case where a multi-column index is created on many columns
CREATE TABLE mc31_tbl (col1 text, col2 char(256), col3 varchar(256), col4 text,
    col5 char(256), col6 varchar(256), col7 text, col8 char(256),
    col9 varchar(256), col10 text, col11 char(256), col12 varchar(256),
    col13 text, col14 char(256), col15 varchar(256), col16 text,
    col17 char(256), col18 varchar(256), col19 text, col20 char(256),
    col21 varchar(256), col22 text, col23 char(256), col24 varchar(256),
    col25 text, col26 char(256), col27 varchar(256), col28 text,
    col29 char(256), col30 varchar(256), col31 text);
CREATE INDEX mc31_tbl_idx ON mc31_tbl USING gin (pgs2norm(col1) gin_bigm_ops,
    pgs2norm(col2) gin_bigm_ops, pgs2norm(col3) gin_bigm_ops,
    pgs2norm(col4) gin_bigm_ops, pgs2norm(col5) gin_bigm_ops,
    pgs2norm(col6) gin_bigm_ops, pgs2norm(col7) gin_bigm_ops,
    pgs2norm(col8) gin_bigm_ops, pgs2norm(col9) gin_bigm_ops,
    pgs2norm(col10) gin_bigm_ops, pgs2norm(col11) gin_bigm_ops,
    pgs2norm(col12) gin_bigm_ops, pgs2norm(col13) gin_bigm_ops,
    pgs2norm(col14) gin_bigm_ops, pgs2norm(col15) gin_bigm_ops,
    pgs2norm(col16) gin_bigm_ops, pgs2norm(col17) gin_bigm_ops,
    pgs2norm(col18) gin_bigm_ops, pgs2norm(col19) gin_bigm_ops,
    pgs2norm(col20) gin_bigm_ops, pgs2norm(col21) gin_bigm_ops,
    pgs2norm(col22) gin_bigm_ops, pgs2norm(col23) gin_bigm_ops,
    pgs2norm(col24) gin_bigm_ops, pgs2norm(col25) gin_bigm_ops,
    pgs2norm(col26) gin_bigm_ops, pgs2norm(col27) gin_bigm_ops,
    pgs2norm(col28) gin_bigm_ops, pgs2norm(col29) gin_bigm_ops,
    pgs2norm(col30) gin_bigm_ops, pgs2norm(col31) gin_bigm_ops)
    WITH (FASTUPDATE = off);
\copy mc31_tbl from 'data/test_tbl_31.txt'
SELECT col1 FROM mc31_tbl
    WHERE pgs2norm(col1) like likequery(pgs2norm('＿Ｓ'))
    ORDER BY col1;
                     col1                     
----------------------------------------------
 =# SHOW ludia_funcs.escape_snippet_keyword ;
(1 row)

EXPLAIN (costs off ) SELECT col1 FROM mc31_tbl
    WHERE pgs2norm(col1) like likequery(pgs2norm('＿Ｓ'))
    ORDER BY col1;
                          QUERY PLAN                          
--------------------------------------------------------------
 Sort
   Sort Key: col1
   ->  Bitmap Heap Scan on mc31_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%\\_s%'::text)
         ->  Bitmap Index Scan on mc31_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%\\_s%'::text)
(6 rows)

SELECT col15 FROM mc31_tbl
    WHERE pgs2norm(col15) LIKE likequery(pgs2norm('ﾃ゛ィ'))
    ORDER BY col15;
                                                                    col15                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------
 •--prefix : インストール先ディレクトリを指定します。未指定時のインストール先は/usr/local/pgsqlです。このオプション指定は必須ではありません。
(1 row)

EXPLAIN (costs off ) SELECT col15 FROM mc31_tbl
    WHERE pgs2norm(col15) LIKE likequery(pgs2norm('ﾃ゛ィ'))
    ORDER BY col15;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Sort
   Sort Key: col15
   ->  Bitmap Heap Scan on mc31_tbl
         Recheck Cond: (pgs2norm((col15)::text) ~~ '%ディ%'::text)
         ->  Bitmap Index Scan on mc31_tbl_idx
               Index Cond: (pgs2norm((col15)::text) ~~ '%ディ%'::text)
(6 rows)

SELECT col31 FROM mc31_tbl
    WHERE pgs2norm(col31) LIKE likequery(pgs2norm('㊔'))
    ORDER BY col31;
           col31            
----------------------------
 $ psql -d <データベース名>
(1 row)

EXPLAIN (costs off) SELECT col31 FROM mc31_tbl
    WHERE pgs2norm(col31) LIKE likequery(pgs2norm('㊔'))
    ORDER BY col31;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Sort Key: col31
   ->  Bitmap Heap Scan on mc31_tbl
         Recheck Cond: (pgs2norm(col31) ~~ '%名%'::text)
         ->  Bitmap Index Scan on mc31_tbl_idx
               Index Cond: (pgs2norm(col31) ~~ '%名%'::text)
(6 rows)

-- Test the cases where various text search patterns are used.
CREATE TABLE abc_tbl (col1 text, col2 text, col3 text);
\copy abc_tbl from data/abc_data.tsv
CREATE INDEX abc_idx ON abc_tbl USING gin
    (pgs2norm(col1) gin_bigm_ops, pgs2norm(col2) gin_bigm_ops, pgs2norm(col3) gin_bigm_ops)
    WITH (FASTUPDATE = off);
SELECT count(*) FROM abc_tbl WHERE
    ((pgs2norm(col1) LIKE likequery(pgs2norm('AAA')) AND
    pgs2norm(col1) LIKE likequery(pgs2norm('BBB'))) AND
    pgs2norm(col1) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col2) LIKE likequery(pgs2norm('AAA')) AND
    pgs2norm(col2) LIKE likequery(pgs2norm('BBB'))) AND
    pgs2norm(col2) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col3) LIKE likequery(pgs2norm('AAA')) AND
    pgs2norm(col3) LIKE likequery(pgs2norm('BBB'))) AND
    pgs2norm(col3) LIKE likequery(pgs2norm('CCC')));
 count 
-------
   169
(1 row)

SELECT count(*) FROM abc_tbl WHERE
    ((pgs2norm(col1) LIKE likequery(pgs2norm('AAA')) AND
    pgs2norm(col1) LIKE likequery(pgs2norm('BBB'))) OR
    pgs2norm(col1) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col2) LIKE likequery(pgs2norm('AAA')) AND
    pgs2norm(col2) LIKE likequery(pgs2norm('BBB'))) OR
    pgs2norm(col2) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col3) LIKE likequery(pgs2norm('AAA')) AND
    pgs2norm(col3) LIKE likequery(pgs2norm('BBB'))) OR
    pgs2norm(col3) LIKE likequery(pgs2norm('CCC')));
 count 
-------
   485
(1 row)

SELECT count(*) FROM abc_tbl WHERE
    ((pgs2norm(col1) LIKE likequery(pgs2norm('AAA')) AND
    pgs2norm(col1) LIKE likequery(pgs2norm('BBB'))) AND
    NOT pgs2norm(col1) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col2) LIKE likequery(pgs2norm('AAA')) AND
    pgs2norm(col2) LIKE likequery(pgs2norm('BBB'))) AND
    NOT pgs2norm(col2) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col3) LIKE likequery(pgs2norm('AAA')) AND
    pgs2norm(col3) LIKE likequery(pgs2norm('BBB'))) AND
    NOT pgs2norm(col3) LIKE likequery(pgs2norm('CCC')));
 count 
-------
   169
(1 row)

SELECT count(*) FROM abc_tbl WHERE
    ((pgs2norm(col1) LIKE likequery(pgs2norm('AAA')) OR
    pgs2norm(col1) LIKE likequery(pgs2norm('BBB'))) AND
    pgs2norm(col1) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col2) LIKE likequery(pgs2norm('AAA')) OR
    pgs2norm(col2) LIKE likequery(pgs2norm('BBB'))) AND
    pgs2norm(col2) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col3) LIKE likequery(pgs2norm('AAA')) OR
    pgs2norm(col3) LIKE likequery(pgs2norm('BBB'))) AND
    pgs2norm(col3) LIKE likequery(pgs2norm('CCC')));
 count 
-------
   387
(1 row)

SELECT count(*) FROM abc_tbl WHERE
    ((pgs2norm(col1) LIKE likequery(pgs2norm('AAA')) OR
    pgs2norm(col1) LIKE likequery(pgs2norm('BBB'))) OR
    pgs2norm(col1) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col2) LIKE likequery(pgs2norm('AAA')) OR
    pgs2norm(col2) LIKE likequery(pgs2norm('BBB'))) OR
    pgs2norm(col2) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col3) LIKE likequery(pgs2norm('AAA')) OR
    pgs2norm(col3) LIKE likequery(pgs2norm('BBB'))) OR
    pgs2norm(col3) LIKE likequery(pgs2norm('CCC')));
 count 
-------
   511
(1 row)

SELECT count(*) FROM abc_tbl WHERE
    ((pgs2norm(col1) LIKE likequery(pgs2norm('AAA')) OR
    pgs2norm(col1) LIKE likequery(pgs2norm('BBB'))) AND
    NOT pgs2norm(col1) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col2) LIKE likequery(pgs2norm('AAA')) OR
    pgs2norm(col2) LIKE likequery(pgs2norm('BBB'))) AND
    NOT pgs2norm(col2) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col3) LIKE likequery(pgs2norm('AAA')) OR
    pgs2norm(col3) LIKE likequery(pgs2norm('BBB'))) AND
    NOT pgs2norm(col3) LIKE likequery(pgs2norm('CCC')));
 count 
-------
   387
(1 row)

SELECT count(*) FROM abc_tbl WHERE
    ((pgs2norm(col1) LIKE likequery(pgs2norm('AAA')) AND
    NOT pgs2norm(col1) LIKE likequery(pgs2norm('BBB'))) AND
    pgs2norm(col1) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col2) LIKE likequery(pgs2norm('AAA')) AND
    NOT pgs2norm(col2) LIKE likequery(pgs2norm('BBB'))) AND
    pgs2norm(col2) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col3) LIKE likequery(pgs2norm('AAA')) AND
    NOT pgs2norm(col3) LIKE likequery(pgs2norm('BBB'))) AND
    pgs2norm(col3) LIKE likequery(pgs2norm('CCC')));
 count 
-------
   169
(1 row)

SELECT count(*) FROM abc_tbl WHERE
    ((pgs2norm(col1) LIKE likequery(pgs2norm('AAA')) AND
    NOT pgs2norm(col1) LIKE likequery(pgs2norm('BBB'))) OR
    pgs2norm(col1) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col2) LIKE likequery(pgs2norm('AAA')) AND
    NOT pgs2norm(col2) LIKE likequery(pgs2norm('BBB'))) OR
    pgs2norm(col2) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col3) LIKE likequery(pgs2norm('AAA')) AND
    NOT pgs2norm(col3) LIKE likequery(pgs2norm('BBB'))) OR
    pgs2norm(col3) LIKE likequery(pgs2norm('CCC')));
 count 
-------
   485
(1 row)

SELECT count(*) FROM abc_tbl WHERE
    ((pgs2norm(col1) LIKE likequery(pgs2norm('AAA')) AND
    NOT pgs2norm(col1) LIKE likequery(pgs2norm('BBB'))) AND
    NOT pgs2norm(col1) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col2) LIKE likequery(pgs2norm('AAA')) AND
    NOT pgs2norm(col2) LIKE likequery(pgs2norm('BBB'))) AND
    NOT pgs2norm(col2) LIKE likequery(pgs2norm('CCC'))) OR
    ((pgs2norm(col3) LIKE likequery(pgs2norm('AAA')) AND
    NOT pgs2norm(col3) LIKE likequery(pgs2norm('BBB'))) AND
    NOT pgs2norm(col3) LIKE likequery(pgs2norm('CCC')));
 count 
-------
   169
(1 row)

-- Test whether pg_bigm and pgs2norm can handle all the UTF8 characters
CREATE UNLOGGED TABLE utf8_tbl (code int, col1 text);
INSERT INTO utf8_tbl VALUES (-1, NULL);
INSERT INTO utf8_tbl VALUES (0, '');
INSERT INTO utf8_tbl SELECT code, repeat(chr(code), 3) FROM generate_series(1, 55295) code;
INSERT INTO utf8_tbl SELECT code, repeat(chr(code), 3) FROM generate_series(57344, 1114111) code;
CREATE INDEX utf8_tbl_idx ON utf8_tbl USING gin (pgs2norm(col1) gin_bigm_ops)
    WITH (FASTUPDATE = off);
-- Test for multi-byte, single-byte, upper-case and lower-case alphabet characters
SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('aa')) ORDER BY code;
  code  |  col1  
--------+--------
     65 | AAA
     97 | aaa
    170 | ªªª
   7468 | ᴬᴬᴬ
   7491 | ᵃᵃᵃ
   8336 | ₐₐₐ
   9398 | ⒶⒶⒶ
   9424 | ⓐⓐⓐ
  65313 | ＡＡＡ
  65345 | ａａａ
 119808 | 𝐀𝐀𝐀
 119834 | 𝐚𝐚𝐚
 119860 | 𝐴𝐴𝐴
 119886 | 𝑎𝑎𝑎
 119912 | 𝑨𝑨𝑨
 119938 | 𝒂𝒂𝒂
 119964 | 𝒜𝒜𝒜
 119990 | 𝒶𝒶𝒶
 120016 | 𝓐𝓐𝓐
 120042 | 𝓪𝓪𝓪
 120068 | 𝔄𝔄𝔄
 120094 | 𝔞𝔞𝔞
 120120 | 𝔸𝔸𝔸
 120146 | 𝕒𝕒𝕒
 120172 | 𝕬𝕬𝕬
 120198 | 𝖆𝖆𝖆
 120224 | 𝖠𝖠𝖠
 120250 | 𝖺𝖺𝖺
 120276 | 𝗔𝗔𝗔
 120302 | 𝗮𝗮𝗮
 120328 | 𝘈𝘈𝘈
 120354 | 𝘢𝘢𝘢
 120380 | 𝘼𝘼𝘼
 120406 | 𝙖𝙖𝙖
 120432 | 𝙰𝙰𝙰
 120458 | 𝚊𝚊𝚊
(36 rows)

SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('BB')) ORDER BY code;
  code  |  col1  
--------+--------
     66 | BBB
     98 | bbb
   7470 | ᴮᴮᴮ
   7495 | ᵇᵇᵇ
   8492 | ℬℬℬ
   9399 | ⒷⒷⒷ
   9425 | ⓑⓑⓑ
  65314 | ＢＢＢ
  65346 | ｂｂｂ
 119809 | 𝐁𝐁𝐁
 119835 | 𝐛𝐛𝐛
 119861 | 𝐵𝐵𝐵
 119887 | 𝑏𝑏𝑏
 119913 | 𝑩𝑩𝑩
 119939 | 𝒃𝒃𝒃
 119991 | 𝒷𝒷𝒷
 120017 | 𝓑𝓑𝓑
 120043 | 𝓫𝓫𝓫
 120069 | 𝔅𝔅𝔅
 120095 | 𝔟𝔟𝔟
 120121 | 𝔹𝔹𝔹
 120147 | 𝕓𝕓𝕓
 120173 | 𝕭𝕭𝕭
 120199 | 𝖇𝖇𝖇
 120225 | 𝖡𝖡𝖡
 120251 | 𝖻𝖻𝖻
 120277 | 𝗕𝗕𝗕
 120303 | 𝗯𝗯𝗯
 120329 | 𝘉𝘉𝘉
 120355 | 𝘣𝘣𝘣
 120381 | 𝘽𝘽𝘽
 120407 | 𝙗𝙗𝙗
 120433 | 𝙱𝙱𝙱
 120459 | 𝚋𝚋𝚋
(34 rows)

SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ｃｃ')) ORDER BY code;
  code  |  col1  
--------+--------
     67 | CCC
     99 | ccc
   7580 | ᶜᶜᶜ
   8450 | ℂℂℂ
   8493 | ℭℭℭ
   8557 | ⅭⅭⅭ
   8573 | ⅽⅽⅽ
   9400 | ⒸⒸⒸ
   9426 | ⓒⓒⓒ
  13252 | ㏄㏄㏄
  65315 | ＣＣＣ
  65347 | ｃｃｃ
 119810 | 𝐂𝐂𝐂
 119836 | 𝐜𝐜𝐜
 119862 | 𝐶𝐶𝐶
 119888 | 𝑐𝑐𝑐
 119914 | 𝑪𝑪𝑪
 119940 | 𝒄𝒄𝒄
 119966 | 𝒞𝒞𝒞
 119992 | 𝒸𝒸𝒸
 120018 | 𝓒𝓒𝓒
 120044 | 𝓬𝓬𝓬
 120096 | 𝔠𝔠𝔠
 120148 | 𝕔𝕔𝕔
 120174 | 𝕮𝕮𝕮
 120200 | 𝖈𝖈𝖈
 120226 | 𝖢𝖢𝖢
 120252 | 𝖼𝖼𝖼
 120278 | 𝗖𝗖𝗖
 120304 | 𝗰𝗰𝗰
 120330 | 𝘊𝘊𝘊
 120356 | 𝘤𝘤𝘤
 120382 | 𝘾𝘾𝘾
 120408 | 𝙘𝙘𝙘
 120434 | 𝙲𝙲𝙲
 120460 | 𝚌𝚌𝚌
(36 rows)

SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ＤＤ')) ORDER BY code;
  code  |  col1  
--------+--------
     68 | DDD
    100 | ddd
   7472 | ᴰᴰᴰ
   7496 | ᵈᵈᵈ
   8517 | ⅅⅅⅅ
   8518 | ⅆⅆⅆ
   8558 | ⅮⅮⅮ
   8574 | ⅾⅾⅾ
   9401 | ⒹⒹⒹ
   9427 | ⓓⓓⓓ
  65316 | ＤＤＤ
  65348 | ｄｄｄ
 119811 | 𝐃𝐃𝐃
 119837 | 𝐝𝐝𝐝
 119863 | 𝐷𝐷𝐷
 119889 | 𝑑𝑑𝑑
 119915 | 𝑫𝑫𝑫
 119941 | 𝒅𝒅𝒅
 119967 | 𝒟𝒟𝒟
 119993 | 𝒹𝒹𝒹
 120019 | 𝓓𝓓𝓓
 120045 | 𝓭𝓭𝓭
 120071 | 𝔇𝔇𝔇
 120097 | 𝔡𝔡𝔡
 120123 | 𝔻𝔻𝔻
 120149 | 𝕕𝕕𝕕
 120175 | 𝕯𝕯𝕯
 120201 | 𝖉𝖉𝖉
 120227 | 𝖣𝖣𝖣
 120253 | 𝖽𝖽𝖽
 120279 | 𝗗𝗗𝗗
 120305 | 𝗱𝗱𝗱
 120331 | 𝘋𝘋𝘋
 120357 | 𝘥𝘥𝘥
 120383 | 𝘿𝘿𝘿
 120409 | 𝙙𝙙𝙙
 120435 | 𝙳𝙳𝙳
 120461 | 𝚍𝚍𝚍
(38 rows)

EXPLAIN (costs off) SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('aa')) ORDER BY code;
                         QUERY PLAN                         
------------------------------------------------------------
 Sort
   Sort Key: code
   ->  Bitmap Heap Scan on utf8_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%aa%'::text)
         ->  Bitmap Index Scan on utf8_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%aa%'::text)
(6 rows)

EXPLAIN (costs off) SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('BB')) ORDER BY code;
                         QUERY PLAN                         
------------------------------------------------------------
 Sort
   Sort Key: code
   ->  Bitmap Heap Scan on utf8_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%bb%'::text)
         ->  Bitmap Index Scan on utf8_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%bb%'::text)
(6 rows)

EXPLAIN (costs off) SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ｃｃ')) ORDER BY code;
                         QUERY PLAN                         
------------------------------------------------------------
 Sort
   Sort Key: code
   ->  Bitmap Heap Scan on utf8_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%cc%'::text)
         ->  Bitmap Index Scan on utf8_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%cc%'::text)
(6 rows)

EXPLAIN (costs off) SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ＤＤ')) ORDER BY code;
                         QUERY PLAN                         
------------------------------------------------------------
 Sort
   Sort Key: code
   ->  Bitmap Heap Scan on utf8_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%dd%'::text)
         ->  Bitmap Index Scan on utf8_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%dd%'::text)
(6 rows)

-- Test for multi-byte, single-byte numbers
SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('11')) ORDER BY code;
  code  |  col1  
--------+--------
     49 | 111
    185 | ¹¹¹
   8321 | ₁₁₁
   9312 | ①①①
   9322 | ⑪⑪⑪
   9342 | ⑾⑾⑾
   9362 | ⒒⒒⒒
  13002 | ㋊㋊㋊
  13155 | ㍣㍣㍣
  13290 | ㏪㏪㏪
  65297 | １１１
 120783 | 𝟏𝟏𝟏
 120793 | 𝟙𝟙𝟙
 120803 | 𝟣𝟣𝟣
 120813 | 𝟭𝟭𝟭
 120823 | 𝟷𝟷𝟷
(16 rows)

SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('２２')) ORDER BY code;
  code  |  col1  
--------+--------
     50 | 222
    178 | ²²²
   8322 | ₂₂₂
   9313 | ②②②
  12882 | ㉒㉒㉒
  13166 | ㍮㍮㍮
  13301 | ㏵㏵㏵
  65298 | ２２２
 120784 | 𝟐𝟐𝟐
 120794 | 𝟚𝟚𝟚
 120804 | 𝟤𝟤𝟤
 120814 | 𝟮𝟮𝟮
 120824 | 𝟸𝟸𝟸
(13 rows)

SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('③③')) ORDER BY code;
  code  |  col1  
--------+--------
     51 | 333
    179 | ³³³
   8323 | ₃₃₃
   9314 | ③③③
  12893 | ㉝㉝㉝
  65299 | ３３３
 120785 | 𝟑𝟑𝟑
 120795 | 𝟛𝟛𝟛
 120805 | 𝟥𝟥𝟥
 120815 | 𝟯𝟯𝟯
 120825 | 𝟹𝟹𝟹
(11 rows)

EXPLAIN (costs off) SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('11')) ORDER BY code;
                         QUERY PLAN                         
------------------------------------------------------------
 Sort
   Sort Key: code
   ->  Bitmap Heap Scan on utf8_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%11%'::text)
         ->  Bitmap Index Scan on utf8_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%11%'::text)
(6 rows)

EXPLAIN (costs off) SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('２２')) ORDER BY code;
                         QUERY PLAN                         
------------------------------------------------------------
 Sort
   Sort Key: code
   ->  Bitmap Heap Scan on utf8_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%22%'::text)
         ->  Bitmap Index Scan on utf8_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%22%'::text)
(6 rows)

EXPLAIN (costs off) SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('③③')) ORDER BY code;
                         QUERY PLAN                         
------------------------------------------------------------
 Sort
   Sort Key: code
   ->  Bitmap Heap Scan on utf8_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%33%'::text)
         ->  Bitmap Index Scan on utf8_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%33%'::text)
(6 rows)

-- Test for Japanese katakana
SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ｱｱ')) ORDER BY code;
 code  |  col1  
-------+--------
 12450 | アアア
 13008 | ㋐㋐㋐
 13058 | ㌂㌂㌂
 65393 | ｱｱｱ
(4 rows)

SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('イイ')) ORDER BY code;
 code  |  col1  
-------+--------
 12452 | イイイ
 13009 | ㋑㋑㋑
 65394 | ｲｲｲ
(3 rows)

EXPLAIN (costs off) SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('ｱｱ')) ORDER BY code;
                          QUERY PLAN                          
--------------------------------------------------------------
 Sort
   Sort Key: code
   ->  Bitmap Heap Scan on utf8_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%アア%'::text)
         ->  Bitmap Index Scan on utf8_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%アア%'::text)
(6 rows)

EXPLAIN (costs off) SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm('イイ')) ORDER BY code;
                          QUERY PLAN                          
--------------------------------------------------------------
 Sort
   Sort Key: code
   ->  Bitmap Heap Scan on utf8_tbl
         Recheck Cond: (pgs2norm(col1) ~~ '%イイ%'::text)
         ->  Bitmap Index Scan on utf8_tbl_idx
               Index Cond: (pgs2norm(col1) ~~ '%イイ%'::text)
(6 rows)

-- Text for NULL
SELECT * FROM utf8_tbl
    WHERE pgs2norm(col1) LIKE likequery(pgs2norm(NULL)) ORDER BY code;
 code | col1 
------+------
(0 rows)

